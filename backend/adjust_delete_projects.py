import sys
import os
from sqlalchemy.orm import Session
from sqlalchemy import and_

from app.database import SessionLocal
from app.models.project import Project
from app.models.assessment import Assessment
from app.models.response import Response

def delete_specific_projects():
    """Delete specific projects by title"""
    # List of projects to delete
    projects_to_delete = [
        "MEDIDAS ANTROPOM√âTRICAS E DISCUSS√ÉO SOBRE RCQ NAS AULAS DE EDUCA√á√ÉO F√çSICA",
        "MAPEANDO O SUIC√çDIO NO BRASIL: UMA AN√ÅLISE CARTOGR√ÅFICA",
        "DISCRIMINA√á√ïES NO CONTEXTO ESCOLAR: DESAFIOS E POSSIBILIDADES",
        "O AMBIENTE ESCOLAR E A SA√öDE MENTAL DOS ESTUDANTES",
        "O CLUBE DA GENTILEZA NA PROMO√á√ÉO DA CONCIENTIZA√á√ÉO E DO BEM-ESTAR DA COMUNIDADE",
        "teste chris 1",
        "teste chris 2",
        "teste chris 3"
    ]
    
    # Initialize database session
    db = SessionLocal()
    
    try:
        print("üóëÔ∏è  INICIANDO EXCLUS√ÉO DE PROJETOS ESPEC√çFICOS")
        print("=" * 60)
        
        deleted_count = 0
        not_found_count = 0
        errors = []
        
        for project_title in projects_to_delete:
            print(f"\nüîç Procurando projeto: {project_title}")
            
            # Find project by exact title match
            project = db.query(Project).filter(
                and_(
                    Project.title == project_title,
                    Project.deleted_at == None
                )
            ).first()
            
            if not project:
                print(f"  ‚ùå Projeto n√£o encontrado")
                not_found_count += 1
                continue
            
            print(f"  ‚úÖ Projeto encontrado: ID {project.id}")
            
            # Check for existing assessments
            assessments = db.query(Assessment).filter(
                Assessment.project_id == project.id
            ).all()
            
            if assessments:
                print(f"  ‚ö†Ô∏è  Projeto possui {len(assessments)} avalia√ß√£o(√µes) associada(s)")
                print(f"  üìã IDs das avalia√ß√µes: {[a.id for a in assessments]}")
                
                # Delete responses first, then assessments
                for assessment in assessments:
                    # Delete all responses for this assessment
                    responses = db.query(Response).filter(Response.assessment_id == assessment.id).all()
                    if responses:
                        print(f"    üóëÔ∏è  Deletando {len(responses)} resposta(s) da avalia√ß√£o {assessment.id}")
                        for response in responses:
                            db.delete(response)
                    
                    # Delete the assessment
                    print(f"    üóëÔ∏è  Deletando avalia√ß√£o {assessment.id}")
                    db.delete(assessment)
            
            # Hard delete the project
            print(f"  üóëÔ∏è  Deletando projeto {project.id}")
            db.delete(project)
            deleted_count += 1
            
            print(f"  ‚úÖ Projeto {project.id} deletado permanentemente")
        
        # Commit all changes
        db.commit()
        
        # Print summary
        print(f"\nüìä RESUMO DA EXCLUS√ÉO:")
        print(f"  ‚úÖ Projetos deletados permanentemente: {deleted_count}")
        print(f"  ‚ùå Projetos n√£o encontrados: {not_found_count}")
        print(f"  ‚ùå Erros: {len(errors)}")
        
        if errors:
            print(f"\n‚ùå ERROS ENCONTRADOS:")
            for error in errors:
                print(f"  - {error}")
        
        print(f"\nüéâ Processo de exclus√£o conclu√≠do!")
        
        # Show remaining projects count
        remaining_projects = db.query(Project).count()
        print(f"üìà Projetos restantes no sistema: {remaining_projects}")
        
    except Exception as e:
        print(f"‚ùå Erro durante a exclus√£o: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def list_projects_to_delete():
    """List all projects that will be deleted (for verification)"""
    projects_to_delete = [
        "MEDIDAS ANTROPOM√âTRICAS E DISCUSS√ÉO SOBRE RCQ NAS AULAS DE EDUCA√á√ÉO F√çSICA",
        "MAPEANDO O SUIC√çDIO NO BRASIL: UMA AN√ÅLISE CARTOGR√ÅFICA",
        "DISCRIMINA√á√ïES NO CONTEXTO ESCOLAR: DESAFIOS E POSSIBILIDADES",
        "O AMBIENTE ESCOLAR E A SA√öDE MENTAL DOS ESTUDANTES",
        "O CLUBE DA GENTILEZA NA PROMO√á√ÉO DA CONCIENTIZA√á√ÉO E DO BEM-ESTAR DA COMUNIDADE",
        "teste chris 1",
        "teste chris 2",
        "teste chris 3"
    ]
    
    db = SessionLocal()
    
    try:
        print("üìã VERIFICA√á√ÉO DOS PROJETOS A SEREM EXCLU√çDOS")
        print("=" * 60)
        
        for i, project_title in enumerate(projects_to_delete, 1):
            print(f"\n{i}. {project_title}")
            
            # Find project
            project = db.query(Project).filter(
                Project.title == project_title
            ).first()
            
            if project:
                # Count assessments
                assessments_count = db.query(Assessment).filter(
                    Assessment.project_id == project.id
                ).count()
                
                print(f"   ‚úÖ Encontrado - ID: {project.id}, Avalia√ß√µes: {assessments_count}")
            else:
                print(f"   ‚ùå N√£o encontrado")
        
        print(f"\n‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° DELETAR PERMANENTEMENTE os projetos encontrados!")
        print(f"   - Projetos ser√£o removidos do banco de dados")
        print(f"   - Avalia√ß√µes associadas ser√£o deletadas")
        print(f"   - Respostas das avalia√ß√µes ser√£o deletadas")
        print(f"   - Esta a√ß√£o N√ÉO PODE ser desfeita!")
        
    except Exception as e:
        print(f"‚ùå Erro durante a verifica√ß√£o: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    delete_specific_projects()

